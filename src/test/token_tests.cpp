#include "test/test_bitcoin.h"
#include "validation.h"
#include "consensus/validation.h"

#include <boost/algorithm/string/classification.hpp>
#include <boost/algorithm/string/split.hpp>
#include <boost/assign/list_of.hpp>
#include <boost/test/unit_test.hpp>
#include <boost/assign/list_of.hpp>
#include <boost/foreach.hpp>


BOOST_FIXTURE_TEST_SUITE(token_transaction_tests, BasicTestingSetup)

BOOST_AUTO_TEST_CASE(token_issue)
{
    // The following is regtest data, not real chain data.
    CValidationState state;

    // input transaction
    CDataStream stream1(ParseHex("0100000000000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0401340101ffffffff020010a5d4e8000000232103888e1f9168e9cb16cc43bd4da59907e7a63dca129a5c28ded1b7655536a29336ac00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000266a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), SER_DISK, CLIENT_VERSION);
    CTransaction tx1(deserialize, stream1);
    BOOST_CHECK_MESSAGE(CheckTransaction(tx1, state), tx1.ToString());
    BOOST_CHECK(state.IsValid());

    // valid test
    // issue token transaction
    CDataStream stream2(ParseHex("02000000ba8eac5b01765de4c9d12641d37936acabe547c2f0736ffd05c7ef4a0ba7f030cc544d3d9b0000000048473044022012bf8d5761dbd559a71286d417edf5bbf2c9344fcd8943315700660b16f2170b02201edbaa364e2ba93f6e90b1b8297b6c57952f7cd5bb5299cf673bbc8a3cb8d2ee01feffffff0300000000000000005eb80201014c580000ca9a3b0000000000000000765de4c9d12641d37936acabe547c2f0736ffd05c7ef4a0ba7f030cc544d3d9b0161016201630164224b55525468776f7773345269476634476674577966466259654a657346755873324d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0860100000000001976a914e8aefd922ab81302bff72ec03ee8ec36a4ae7f9a88ac00000000765de4c9d12641d37936acabe547c2f0736ffd05c7ef4a0ba7f030cc544d3d9b00ca9a3b00000000b49d0899e80000001976a914098be318370a7c46526e801215d250106a3ed2d888ac0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c8000000"), SER_DISK, CLIENT_VERSION);
    CTransaction tx2(deserialize, stream2);
    BOOST_CHECK_MESSAGE(CheckTransaction(tx2, state), tx2.ToString());
    BOOST_CHECK(state.IsValid());

    // check fee
    BOOST_CHECK_EQUAL(tx2.vin[0].prevout.hash.ToString(), tx1.GetHash().ToString());
    CAmount inputAmount = tx1.vout[tx2.vin[0].prevout.n].nValue;
    CAmount outAmount = tx2.GetValueOut();
    BOOST_CHECK(inputAmount >= outAmount + TOKEN_ISSUE_FEE);
}

BOOST_AUTO_TEST_CASE(token_send)
{
    CValidationState state;
    // input
    CDataStream stream1(ParseHex("02000000c5d8ad5b0297b655bc2d7f293e48071d20ee56beb6ba25e6dad2be090e4b1ede68c466eb7f010000006b483045022100988e9b7ae20e1898ba34eb2caaa97071e30103b05fa5d7c79c56feed4a33128402205bc4cc2d96cbf3a20f980461d3049945fe28a71d50df6302e979493d2581c1be012103d6b72f49014b9b0cd875382e9112e1a4aac9078e6b372592cc60bd58f70cb348feffffffb00bec2a43193f85336ceb78467a9814c6c81a3f63ccf528f7993090082eaf65020000006a4730440220163777abf29048fdffbf5f3b5e54e80858a1fe959a58283a267655db26f1eefe02207c0f7260bb104842e697489fb421930d07612480a883759a75360f42dd9724220121023cc1aa17b66d68704f9918c63c8991dcc7c65ab2dc3d76041773e74b99a3b49cfeffffff03000000000000000031b80201032c00000000765de4c9d12641d37936acabe547c2f0736ffd05c7ef4a0ba7f030cc544d3d9b00e1f505000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0860100000000001976a9140789e3704d72a8e334c7cbd22fec21e90b947f6988ac00000000765de4c9d12641d37936acabe547c2f0736ffd05c7ef4a0ba7f030cc544d3d9b00c2eb0b00000000e4f00799e80000001976a9140789e3704d72a8e334c7cbd22fec21e90b947f6988ac0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000be040000"), SER_DISK, CLIENT_VERSION);
    CTransaction tx1(deserialize, stream1);
    BOOST_CHECK_MESSAGE(CheckTransaction(tx1, state), tx1.ToString());
    BOOST_CHECK(state.IsValid());

    // output
    CDataStream stream2(ParseHex("020000006548c05b0293da202c9c1fee9c4edf8c38afec798432cd4f3043fcf3529381888cca846012010000006b48304502210093d396296a453d282f47263c3ee9465f8472938de01b64ae970f16f06ef58db902202647349ddb4da00d8fd9e9d0254cbfeacf228307c2b4b0873f65b07da6125c6501210217feadac99fba469a3e000aadd43228dd79d8a7d501c52a8a38a3cf30e4f1d61feffffff93da202c9c1fee9c4edf8c38afec798432cd4f3043fcf3529381888cca846012020000006b4830450221009a1ab8f4116b03c752b9178790bf89681e5bab73f8525616c1cec7050752cc2a02207f326596bccedb0865dc58e9860a0eaf5b2d4822ce734de97e3cd4655404080601210217feadac99fba469a3e000aadd43228dd79d8a7d501c52a8a38a3cf30e4f1d61feffffff04000000000000000031b80201022c00000000765de4c9d12641d37936acabe547c2f0736ffd05c7ef4a0ba7f030cc544d3d9b00c2eb0b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0860100000000001976a914d4bbe68d017d57e37e8f7569f257359a456babf088ac00000000765de4c9d12641d37936acabe547c2f0736ffd05c7ef4a0ba7f030cc544d3d9b8096980000000000a0860100000000001976a9140a889568440798dff13cb37f95cb95620ea4e89888ac00000000765de4c9d12641d37936acabe547c2f0736ffd05c7ef4a0ba7f030cc544d3d9b802b530b00000000cc370699e80000001976a9140a889568440798dff13cb37f95cb95620ea4e89888ac0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a7040000"), SER_DISK, CLIENT_VERSION);
    CTransaction tx2(deserialize, stream2);
    BOOST_CHECK_MESSAGE(CheckTransaction(tx2, state), tx2.ToString());
    BOOST_CHECK(state.IsValid());

    // check token value
    CAmount inputAmount = 0;
    for (size_t i = 0; i<tx2.vin.size(); i++){
        inputAmount += tx1.vout[tx2.vin[i].prevout.n].nTokenValue;
    }
    CAmount outAmount = 0;
    for (size_t i = 0; i<tx2.vout.size(); i++){
        outAmount += tx2.vout[i].nTokenValue;
    }
    BOOST_CHECK_EQUAL(inputAmount, outAmount);
}

BOOST_AUTO_TEST_CASE(token_burn)
{
    CValidationState state;
    // input
    CDataStream stream1(ParseHex("020000006548c05b0293da202c9c1fee9c4edf8c38afec798432cd4f3043fcf3529381888cca846012010000006b48304502210093d396296a453d282f47263c3ee9465f8472938de01b64ae970f16f06ef58db902202647349ddb4da00d8fd9e9d0254cbfeacf228307c2b4b0873f65b07da6125c6501210217feadac99fba469a3e000aadd43228dd79d8a7d501c52a8a38a3cf30e4f1d61feffffff93da202c9c1fee9c4edf8c38afec798432cd4f3043fcf3529381888cca846012020000006b4830450221009a1ab8f4116b03c752b9178790bf89681e5bab73f8525616c1cec7050752cc2a02207f326596bccedb0865dc58e9860a0eaf5b2d4822ce734de97e3cd4655404080601210217feadac99fba469a3e000aadd43228dd79d8a7d501c52a8a38a3cf30e4f1d61feffffff04000000000000000031b80201022c00000000765de4c9d12641d37936acabe547c2f0736ffd05c7ef4a0ba7f030cc544d3d9b00c2eb0b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0860100000000001976a914d4bbe68d017d57e37e8f7569f257359a456babf088ac00000000765de4c9d12641d37936acabe547c2f0736ffd05c7ef4a0ba7f030cc544d3d9b8096980000000000a0860100000000001976a9140a889568440798dff13cb37f95cb95620ea4e89888ac00000000765de4c9d12641d37936acabe547c2f0736ffd05c7ef4a0ba7f030cc544d3d9b802b530b00000000cc370699e80000001976a9140a889568440798dff13cb37f95cb95620ea4e89888ac0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a7040000"), SER_DISK, CLIENT_VERSION);
    CTransaction tx1(deserialize, stream1);
    BOOST_CHECK_MESSAGE(CheckTransaction(tx1, state), tx1.ToString());
    BOOST_CHECK(state.IsValid());

    // output
    CDataStream stream2(ParseHex("02000000df51c05b020ec351b6e8bf252abae74c5ef3e35ab3df8992d2ef915a7a85c6e58425058646020000006b483045022100c3e8add1a16e2039fd08490f882d8d54b55e8886d5588c5765f9be90a4536511022007023073af313ba6856dc5a51fa4994a57b4950d8cd41a0fd2e77f6ae533499601210232ceea216c46f96f86c8e30ce9a6077f5ba983afdda3561fa12807109bbaa7e4feffffff0ec351b6e8bf252abae74c5ef3e35ab3df8992d2ef915a7a85c6e58425058646030000006a473044022025861068341aac4a126112f644ecefb06645a0985ef15561fbf7bfa9c18264670220716604c1a15147045526e0f58482de4f0a152fd3f3a81889c8c69c4e2e2320a101210232ceea216c46f96f86c8e30ce9a6077f5ba983afdda3561fa12807109bbaa7e4feffffff03000000000000000031b80201032c00000000765de4c9d12641d37936acabe547c2f0736ffd05c7ef4a0ba7f030cc544d3d9b80969800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0860100000000001976a9146a1c0e14f1f222e08f77dbbd805c201b961d4e7188ac00000000765de4c9d12641d37936acabe547c2f0736ffd05c7ef4a0ba7f030cc544d3d9b0095ba0a000000006c0b0699e80000001976a9146a1c0e14f1f222e08f77dbbd805c201b961d4e7188ac0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0040000"), SER_DISK, CLIENT_VERSION);
    CTransaction tx2(deserialize, stream2);
    BOOST_CHECK_MESSAGE(CheckTransaction(tx2, state), tx2.ToString());
    BOOST_CHECK(state.IsValid());

    // check token value
    std::vector<unsigned char> tokenDataFromScript;
    tokencode scriptcode = GetTxTokenCode(tx2, &tokenDataFromScript);
    CScriptTokenBurnInfo burninfo;
    if (!GetBurnInfoFromScriptData(burninfo, tokenDataFromScript)){
        BOOST_CHECK_MESSAGE(false, "decode script token burn info error");
    }
    CAmount inputAmount = 0;
    for (size_t i = 0; i<tx2.vin.size(); i++){
        inputAmount += tx1.vout[tx2.vin[i].prevout.n].nTokenValue;
    }
    CAmount outAmount = 0;
    for (size_t i = 0; i<tx2.vout.size(); i++){
        outAmount += tx2.vout[i].nTokenValue;
    }
    BOOST_CHECK_EQUAL(inputAmount, outAmount + burninfo.burnAmount);
}

BOOST_AUTO_TEST_SUITE_END()
